name: Workflow
on: [push, pull_request]
permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Install dependencies
        run: make packages
      - name: Run linters
        run: make lint
  
  backup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install latest rclone
        run: curl -fsSL https://rclone.org/install.sh | sudo bash
      - name: Create bundle
        run: |
          TS=$(date +%F)
          mkdir -p bundles
          git bundle create "bundles/${{ github.event.repository.name }}-$TS.bundle" --all
          sha256sum bundles/* > bundles/SHA256SUMS
      - name: Upload bundle (FTPS, robust, no deletes)
        env:
          FTP_HOSTNAME: ${{ secrets.FTP_HOSTNAME }}
          FTP_PORT: "21"
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          set -euo pipefail
          TS=$(date +%F)
          PORT="${FTP_PORT:-21}"
          PASS_OBS=$(rclone obscure "${FTP_PASSWORD}")

          # create remote dir first (helps some FTPS servers)
          rclone mkdir ":ftp,host=${FTP_HOSTNAME},port=${PORT},user=${FTP_USERNAME},pass=${PASS_OBS},explicit_tls=true,disable_tls13=true,disable_mlsd=true:backups/git/${{ github.repository }}-$TS"

          # upload with conservative settings; won't overwrite or delete existing files
          rclone -vv copy bundles \
            ":ftp,host=${FTP_HOSTNAME},port=${PORT},user=${FTP_USERNAME},pass=${PASS_OBS},explicit_tls=true,disable_tls13=true,disable_mlsd=true:/backups/git/${{ github.repository }}-$TS" \
            --transfers 1 --checkers 1 --ftp-concurrency 1 \
            --timeout 30m --contimeout 30s \
            --retries 6 --low-level-retries 30 --retries-sleep 10s \
            --immutable

  # test:
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   env:
  #     CONFIG_MODULE: "test.config"
  #   strategy:
  #     matrix:
  #       python-version: ["3.12"]
  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_USER: postgres
  #         POSTGRES_DB: web_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: "pip"
  #     - name: Install dependencies
  #       run: pip install -r requirements.txt -r requirements-dev.txt
  #     - name: Run database migrations
  #       run: alembic upgrade head
  #     - name: Run unit tests
  #       run: |
  #         pytest . \
  #           --cov=pytest_cov \
  #           --cov-report=xml:.cache/pytest/coverage.xml \
  #           --junitxml=.cache/pytest/results.xml \
  #           --verbose --tb=short --durations=10
  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: test-results-${{ matrix.python-version }}
  #         path: .cache/pytest/results.xml
  #         retention-days: 30
  #     - name: Upload coverage report
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: coverage-${{ matrix.python-version }}
  #         path: .cache/pytest/coverage.xml
  #         retention-days: 30
